{
    "openapi":"3.0.0",
    "info":{
        "version":"1.0.0",
        "description":"A basic API for E-Commerce application.",
        "title":"E-Commerce API"
    },
    "servers":[
        {
            "url":"http://localhost:5100"
        }
    ],
    "components":{
        "securitySchemes":{
            "JWT":{
                "in":"header",
                "name":"Authorization",
                "type":"apiKey"
            }
        }
    },
    "paths":{
    "/api/users/signup":{
        "post":{
            "tags":["Users"],
            "summary":"To Register the user to application.",
            "description":"User SignUp to register the user with application for future signIn and access other features.",
            "requestBody":{
                "content":{
                    "application/json":{
                        "schema":{
                        "type":"object",
                        "properties":{
                            "name":{
                                "type":"string"
                            },
                            "email":{
                                "type":"string"
                            },
                            "password":{
                                "type":"string"
                            },
                            "type":{
                                "type":"string"
                            }
                        }
                    }
                }
            } 
        },
        "responses":{
            "201":{
                "description":"OK"
            },
            "400":{
                "description":"Bad Request"
            }
        }
        }
    },
    "/api/users/signin":{
            "post":{
                "tags":["Users"],
                "summary":"For log in the user to apllication.",
                "description":"User login to get token and access other features.",
                "requestBody":{
                        "content":{
                            "application/json":{
                                "schema":{
                                "type":"object",
                                "properties":{
                                    "email":{
                                        "type":"string"
                                    },
                                    "password":{
                                        "type":"string"
                                    }
                                }
                            }
                        }
                    } 
                },
                "responses":{
                    "200":{
                        "description":"OK"
                    },
                    "400":{
                        "description":"Incorrect Credentials"
                    }
                }
            }
    },
    "/api/products/":{
        "get":{
            "tags":["Products"],
            "summary":" To get products",
            "description":"For listing all the products available for the user.",
            "security":[
                {
                    "JWT":{}
                }
            ],
            "responses":{
                "200":{
                    "description":"OK"
                },
                "401":{
                    "description":"Unauthorized Access"
                }
            }
        },
        "post":{
            "tags":["Products"],
            "summary":"To add a product.",
            "description":"Endpoint to add a new product.",
            "security":[
                {
                    "JWT":{}
                }
            ],
            "requestBody": {
                "required": true,
                "content": {
                    "multipart/form-data": {
                        "schema": {
                            "type": "object",
                            "properties": {
                                "image": {
                                    "type": "string",
                                    "format":"binary",
                                    "description": "Image file of the product"
                                },
                                "name": {
                                    "type": "string",
                                    "description": "Name of the product"
                                },
                                "desc": {
                                    "type": "string",
                                    "description": "Description of the product"
                                },
                                "category": {
                                    "type": "string",
                                    "description": "Category of the product"
                                },
                                "price": {
                                    "type": "number",
                                    "format": "float",
                                    "description": "Price of the product"
                                },
                                "sizes": {
                                    "type": "string",
                                    "description": "Comma-separated list of sizes"
                                }
                            },
                            "required": ["image", "name", "desc", "category", "price", "sizes"]
                        }
                    }
                }
            },
            "responses":{
                "201":{
                    "description":"Product Added"
                },
                "500":{
                    "description":"Internal server error"
                }
            }
        }
    },
    "/api/products/{id}":{
        "get":{
            "tags":["Products"],
            "summary":" To get one products",
            "description":"For list one product on the basis of productId for the user.",
            "security":[
                {
                    "JWT":{}
                }
            ],
            "parameters": [
                {
                  "in": "path",
                  "name": "id",
                  "description": "Numeric ID of the product to retrieve",
                  "schema":{
                    "type": "integer",
                    "format": "int64"
                  }
                }
            ],
            "responses":{
                "200":{
                    "description":"OK"
                },"404":{
                    "description":"Prodct not found"
                }
            }
        }
    },
    "/api/products/getFilterProduct":{
        "get":{
            "tags":["Products"],
            "summary": "To filter products",
            "description":"Filter produtcs on basis of multiple properties of the product.",
            "security":[
                {
                    "JWT":{}
                }
            ],
            "parameters":[
                {
                    "in":"query",
                    "name":"minPrice",
                    "description":"For setting the minimum price of products.",
                    "schema":{
                        "type":"integer",
                        "format":"int64"
                    }
                },{
                    "in":"query",
                    "name":"maxPrice",
                    "description":"For setting the maximum price of products.",
                    "schema":{"type":"integer","format":"int64"}
                },{
                    "in":"query",
                    "name":"category",
                    "description":"For setting the category of the product.",
                    "schema":{"type":"string"}
                }
            ],
            "responses":{
                "200":{
                    "description":"OK"
                },
                "404":{
                    "description":"No Product Found"
                }
            }
        }
    },
    "/api/products/rate":{
        "post":{
            "tags":["Products"],
            "summary":"To rate Product",
            "description":"User can rate product after login and it will get updated with new rating if user already has rated it before.",
            "security":[
                {
                    "JWT":{}
                }
            ],
            "parameters":[
                {
                    "in":"query",
                    "name":"userID",
                    "description":"userId of the logged in user",
                    "schema":{"type":"integer","format":"int64"}
                },{
                    "in":"query",
                    "name":"productID",
                    "description":"productID of the product, user want to rate.",
                    "schema":{"type":"integer","format":"int64"}
                },{
                    "in":"query",
                    "name":"rating",
                    "description":"Rating of the product which user want to post for the product.",
                    "schema":{"type":"integer","format":"int64"}
                }
            ],
            "responses":{
                "200":{
                    "description":"OK"
                },
                "400":{
                    "description":"Bad Request"
                }
            }
        }
    },
    "/api/cart/":{
        "get":{
            "tags":["Cart"],
            "summary":"To get cart products",
            "description":"It returns the items in the cart of particular user",
            "security":[
                {
                    "JWT":{}
                }
            ],
            "responses":{
                "200":{
                    "description":"OK"
                },"500":{
                    "description":"Internal server error"
                },"404":{
                    "description":"cart not found or empty"
                },"401":{
                    "description":"Unauthorized Access"
                }
            }
        },
        "post": {
            "tags": ["Cart"],
            "summary": "Add item to user's cart",
            "description": "Endpoint to add an item to the user's cart.",
            "security": [
                {
                    "JWT": []
                }
            ],
            "parameters": [
                {
                    "in": "query",
                    "name": "productId",
                    "schema": {
                        "type": "string",
                        "description": "ID of the product to add to the cart."
                    },
                    "required": true
                },
                {
                    "in": "query",
                    "name": "quantity",
                    "schema": {
                        "type": "integer",
                        "description": "Quantity of the product to add to the cart."
                    },
                    "required": true
                }
            ],
            "responses": {
                "201": {
                    "description": "Item added to cart"
                },
                "400": {
                    "description": "Bad request - Invalid input data"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "500": {
                    "description": "Internal server error"
                }
            }
        }
    },
    "/api/cart/{id}":{
        "delete": {
            "tags": ["Cart"],
            "summary": "Remove item from user's cart",
            "description": "Endpoint to remove an item from the user's cart.",
            "security": [
                {
                    "JWT": []
                }
            ],
            "parameters": [
                {
                    "in": "path",
                    "name": "id",
                    "schema": {
                        "type": "string",
                        "description": "ID of the cart item to remove."
                    },
                    "required": true
                }
            ],
            "responses": {
                "200": {
                    "description": "Cart item removed successfully"
                },
                "400": {
                    "description": "Bad request - Invalid input data"
                },
                "401": {
                    "description": "Unauthorized"
                },
                "404": {
                    "description": "Cart item not found"
                },
                "500": {
                    "description": "Internal server error"
                }
            }
        }
    }
}
}